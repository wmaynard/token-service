variables:
  # KUBE_INGRESS_BASE_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  KUBE_INGRESS_BASE_DOMAIN: nonprod.tower.cdrentertainment.com
  HELM_SCALE_EXTRA_ARGS: --set postgresql.enabled="false"

  K8S_SECRET_GRAPHITE: "$GRAPHITE"
  K8S_SECRET_LOGGLY_URL: "$LOGGLY_URL"
  K8S_SECRET_RUMBLE_COMPONENT: "$RUMBLE_COMPONENT"
  K8S_SECRET_RUMBLE_DEPLOYMENT: "$RUMBLE_DEPLOYMENT"
  K8S_SECRET_MONGODB_NAME: "$RUMBLE_COMPONENT-$RUMBLE_DEPLOYMENT"
  K8S_SECRET_VERBOSE_LOGGING: "$VERBOSE_LOGGING"

# from gitlab project ci variables - normally env specific
  K8S_SECRET_RUMBLE_KEY: "$RUMBLE_KEY"
  K8S_SECRET_MONGODB_URI: "$MONGODB_URI"
  K8S_SECRET_TOKEN_SIGNATURE: "$TOKEN_SIGNATURE"
  K8S_SECRET_GAME_KEY: "$GAME_KEY"
  K8S_SECRET_PEM_PUBLIC: "$PEM_PUBLIC"
  K8S_SECRET_PEM_PRIVATE: "$PEM_PRIVATE"


  DOCKER_DRIVER: overlay2
  DEPLOY_TYPE: "kubernetes" # "kubernetes", "beanstalk", "both"

  ROLLOUT_RESOURCE_TYPE: deployment

  DOCKER_TLS_CERTDIR: ""  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501

stages:
  - app_build
  - build
  - scan
  - deploy  # dummy stage to follow the template guidelines
  - dev
  - staging
  - production
  - performance
  - cleanup

build_app:
  stage: app_build
  image: mcr.microsoft.com/dotnet/sdk:6.0
  tags:
    - kubernetes
  script:
    - dotnet nuget add source --username $BOT_USER --password $BOT_PAT --store-password-in-clear-text --name github "https://gitlab.cdrentertainment.com/api/v4/projects/14/packages/nuget/index.json"
    - dotnet restore
    - dotnet build --no-restore --configuration Release
    - CURRENTVERSION="$(dotnet ./bin/Release/net6.0/token-service.dll -version | cut -d':' -f2)"
    - echo $CURRENTVERSION
    - git tag $CURRENTVERSION; git push https://$BOT_USER:${BOT_PAT}@gitlab.cdrentertainment.com/platform-services/$CI_PROJECT_NAME.git --tags
  artifacts:
    paths:
      - bin/Release/net6.0/*
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always


build_image:
  stage: build
  allow_failure: false
  cache:
    key: $CI_PROJECT_NAME-scan
    paths:
      - ./.trivycache
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - mkdir -p $CI_PROJECT_DIR/trivy
    - mkdir -p $CI_PROJECT_DIR/.trivycache
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    - cd $CI_PROJECT_DIR/trivy
    - wget https://github.com/aquasecurity/trivy/releases/download/v0.20.1/trivy_0.20.1_Linux-64bit.tar.gz
    - tar -zxvf trivy*
    - chmod +x $CI_PROJECT_DIR/trivy
    - wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
    - ./trivy --cache-dir $CI_PROJECT_DIR/.trivycache image --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  rules:
    - if: '$BUILD_DISABLED'
      when: never
    - if: $DEPLOY_TYPE == "beanstalk"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $DEPLOY_TYPE == "kubernetes" || $DEPLOY_TYPE == "both"
      when: on_success
  needs:
    - job: build_app
      artifacts: true

include:
  - '/.gitlab/deploy-k8s.yaml'

